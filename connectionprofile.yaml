name: "acmedevmode_basic"
version: "1.0"

#
# The client section is SDK-specific. The sample below is for the node.js SDK
#
#client:
  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
 # organization: Org1

  # set connection timeouts for the peer and orderer for the client
  # removing timeout value : 3s to 3
  #connection:
   # timeout:
    # peer:
     # endorser: 3s
      #eventHub: 3s
      #eventReg: 3s
     #orderer: 30000

  # Needed to load users crypto keys and certs.
#  cryptoconfig:
 #   path: ./crypto-config

  # Some SDKs support pluggable KV stores, the properties under "credentialStore" 
  # are implementation specific
  #credentialStore:
    # [Optional]. Specific to FileKeyValueStore.js or similar implementations in other SDKs. Can be others
    # if using an alternative impl. For instance, CouchDBKeyValueStore.js would require an object
    # here for properties like url, db name, etc.
   # path: "/tmp/hfc-kvs"

    # [Optional]. Specific to the CryptoSuite implementation. Software-based implementations like 
    # CryptoSuite_ECDSA_AES.js in node SDK requires a key store. PKCS#11 based implementations does 
    # not.
    #cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store. 
     # path: "/tmp/hfc-cvs"

    # [Optional]. Specific to Composer environment
    #wallet: wallet-name

  # BCCSP config for the client.
  # BCCSP:
  # security:
  #  enabled: true
  #  default:
  #   provider: "SW"
  #  hashAlgorithm: "SHA2"
  #  softVerify: true
  #  ephemeral: false
  #  level: 256
  #  pin: "12345678"
  #  label: "ForFabric"
    # library: /crypto-config/peerOrganizations/org1.acme.com/msp

channels:
    mychannel:
        orderers:
            - orderer.acme.com
        peers:       
            peer0.org1.acme.com:
                endorsingPeer: true
                chaincodeQuery: true
                ledgerQuery: true
                eventSource: true
                discover: true
            peer0.org2.acme.com:
                endorsingPeer: true
                chaincodeQuery: false
                ledgerQuery: true
                eventSource: false
            peer0.org3.acme.com:
                endorsingPeer: true
                chaincodeQuery: true
                ledgerQuery: true
                eventSource: true
# the below are for conveneience in the dev environment alone
# sample config from from https://jira.hyperledger.org/browse/FABN-808
organizations:
    Org1:
        mspid: Org1MSP
        peers:
            - peer0.org1.example.com
        certificateAuthorities:
            - ca-org1
        adminPrivateKey:
            path: crypto-config/peerOrganizations/org1.acme.com/users/Admin@org1.acme.com/msp/keystore/3c8b607419b6568cd64cda9e1c769789749c9caeadffebba8ca0c3bccff71171_sk
        signedCert:
            path: crypto-config/peerOrganizations/org1.acme.com/users/Admin@org1.acme.com/msp/signcerts/Admin@org1.acme.com-cert.pem

    Org2:
        mspid: Org2MSP
        peers:
            - peer0.org2.acme.com
        certificateAuthorities:
            - ca-org2
        adminPrivateKey:
            path: crypto-config/peerOrganizations/org2.acme.com/users/Admin@org2.acme.com/msp/keystore/084f486a2b14f26836d12f0a18d5111fcad11c943a9d111f7df1d903a1493e77_sk
        signedCert:
            path: crypto-config/peerOrganizations/org2.acme.com/users/Admin@org2.acme.com/msp/signcerts/Admin@org2.acme.com-cert.pem

    Org3:
        mspid: Org3MSP
        peers:
            - peer0.org3.acme.com
        certificateAuthorities:
            - ca-org3
        adminPrivateKey:
            path: crypto-config/peerOrganizations/org3.acme.com/users/Admin@org3.acme.com/msp/keystore/7a606572b0ca8024ce04c65e10fda787a5470302382f9fb22cd3f9c2e54d01c4_sk
        signedCert:
            path: crypto-config/peerOrganizations/org3.acme.com/users/Admin@org3.acme.com/msp/signcerts/Admin@org3.acme.com-cert.pem

orderers:
    orderer.acme.com:
        url: grpcs://localhost:7050
        grpcOptions:
            ssl-target-name-override: orderer.acme.com
            # increasing 15 to 30000
            grpc-max-send-message-length: 10000000
        #not a grpc options value
        tlsCACerts:
            #relative path without quotes - UnhandledPromiseRejectionWarning: Error: invalid grpc option value:tlsCACerts-> [object Object] expected string|integer
            path: crypto-config/ordererOrganizations/acme.com/orderers/orderer.acme.com/tls/ca.crt
peers:
    peer0.org1.acme.com:
        url: grpcs://localhost:7051
        eventUrl: grpcs://localhost:7053
        grpcOptions:
            ssl-target-name-override: peer0.org1.acme.com
            grpc.keepalive_time_ms: 600000
            request-timeout: 12000001
        tlsCACerts:
            path: crypto-config/peerOrganizations/org1.acme.com/peers/peer0.org1.acme.com/tls/ca.crt

    peer0.org2.acme.com:
        url: grpcs://localhost:8051
        eventUrl: grpcs://localhost:8053
        grpcOptions:
            ssl-target-name-override: peer0.org2.acme.com
            grpc.keepalive_time_ms: 600000
            request-timeout: 12000002
        #same level as grpcOptions (Error: invalid grpc option value:tlsCACerts)
        tlsCACerts:
            path: crypto-config/peerOrganizations/org2.acme.com/peers/peer0.org2.acme.com/tls/ca.crt

    peer0.org3.acme.com:
        url: grpcs://localhost:9051
        eventUrl: grpcs://localhost:9053
        grpcOptions:
            ssl-target-name-override: peer0.org3.acme.com
            grpc.keepalive_time_ms: 600000
            #Added this for getGenesisBlock timeout
            request-timeout: 12000002
        tlsCACerts:
            path: crypto-config/peerOrganizations/org3.acme.com/peers/peer0.org3.acme.com/tls/ca.crt

certificateAuthorities:
  ca-org1:
    url: https://localhost:7054
    httpOptions:
      verify: false
    tlsCACerts:
      path: crypto-config/peerOrganizations/org1.acme.com/ca/ca.org1.acme.com-cert.pem
      # Client key and cert for TLS mutual auth with Fabric CA. If the target Fabric CA server
      # does not have TLS mutual auth turned on, then this section is not needed
      client:
        keyfile: path/to/tls/fabricca/certs/client/client_fabric_client-key.pem
        certfile: path/to/tls/fabricca/certs/client/client_fabric_client.pem
    registrar:
      - enrollId: admin
        enrollSecret: adminpw
    caName: ca-org1

  ca-org2:
    url: https://localhost:8054
    httpOptions:
      verify: false
    tlsCACerts:
      path: crypto-config/peerOrganizations/org2.acme.com/ca/ca.org2.acme.com-cert.pem
      # Client key and cert for TLS mutual auth with Fabric CA. If the target Fabric CA server
      # does not have TLS mutual auth turned on, then this section is not needed
      client:
        keyfile: path/to/tls/fabricca/certs/client/client_fabric_client-key.pem
        certfile: path/to/tls/fabricca/certs/client/client_fabric_client.pem
    registrar:
      - enrollId: admin
        enrollSecret: adminpw
    caName: ca-org2
  
  ca-org3:
    url: https://localhost:9054
    httpOptions:
      verify: false
    tlsCACerts:
      path: crypto-config/peerOrganizations/org3.acme.com/ca/ca.org3.acme.com-cert.pem
      # Client key and cert for TLS mutual auth with Fabric CA. If the target Fabric CA server
      # does not have TLS mutual auth turned on, then this section is not needed
      client:
        keyfile: path/to/tls/fabricca/certs/client/client_fabric_client-key.pem
        certfile: path/to/tls/fabricca/certs/client/client_fabric_client.pem
    registrar:
      - enrollId: admin
        enrollSecret: adminpw
    caName: ca-org3